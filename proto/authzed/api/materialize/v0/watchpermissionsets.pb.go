// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: authzed/api/materialize/v0/watchpermissionsets.proto

package v0

import (
	v1 "github.com/authzed/authzed-go/proto/authzed/api/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PermissionSetChange_SetOperation int32

const (
	PermissionSetChange_SET_OPERATION_UNSPECIFIED PermissionSetChange_SetOperation = 0
	PermissionSetChange_SET_OPERATION_ADDED       PermissionSetChange_SetOperation = 1
	PermissionSetChange_SET_OPERATION_REMOVED     PermissionSetChange_SetOperation = 2
)

// Enum value maps for PermissionSetChange_SetOperation.
var (
	PermissionSetChange_SetOperation_name = map[int32]string{
		0: "SET_OPERATION_UNSPECIFIED",
		1: "SET_OPERATION_ADDED",
		2: "SET_OPERATION_REMOVED",
	}
	PermissionSetChange_SetOperation_value = map[string]int32{
		"SET_OPERATION_UNSPECIFIED": 0,
		"SET_OPERATION_ADDED":       1,
		"SET_OPERATION_REMOVED":     2,
	}
)

func (x PermissionSetChange_SetOperation) Enum() *PermissionSetChange_SetOperation {
	p := new(PermissionSetChange_SetOperation)
	*p = x
	return p
}

func (x PermissionSetChange_SetOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionSetChange_SetOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_enumTypes[0].Descriptor()
}

func (PermissionSetChange_SetOperation) Type() protoreflect.EnumType {
	return &file_authzed_api_materialize_v0_watchpermissionsets_proto_enumTypes[0]
}

func (x PermissionSetChange_SetOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionSetChange_SetOperation.Descriptor instead.
func (PermissionSetChange_SetOperation) EnumDescriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{5, 0}
}

type WatchPermissionSetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional_starting_after is used to specify the SpiceDB revision to start watching from.
	// If not specified, the watch will start from the current SpiceDB revision time of the request ("head revision").
	OptionalStartingAfter *v1.ZedToken `protobuf:"bytes,1,opt,name=optional_starting_after,json=optionalStartingAfter,proto3" json:"optional_starting_after,omitempty"`
}

func (x *WatchPermissionSetsRequest) Reset() {
	*x = WatchPermissionSetsRequest{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchPermissionSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPermissionSetsRequest) ProtoMessage() {}

func (x *WatchPermissionSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPermissionSetsRequest.ProtoReflect.Descriptor instead.
func (*WatchPermissionSetsRequest) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{0}
}

func (x *WatchPermissionSetsRequest) GetOptionalStartingAfter() *v1.ZedToken {
	if x != nil {
		return x.OptionalStartingAfter
	}
	return nil
}

type WatchPermissionSetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*WatchPermissionSetsResponse_Change
	//	*WatchPermissionSetsResponse_CompletedRevision
	//	*WatchPermissionSetsResponse_LookupPermissionSetsRequired
	//	*WatchPermissionSetsResponse_BreakingSchemaChange
	Response isWatchPermissionSetsResponse_Response `protobuf_oneof:"response"`
}

func (x *WatchPermissionSetsResponse) Reset() {
	*x = WatchPermissionSetsResponse{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchPermissionSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPermissionSetsResponse) ProtoMessage() {}

func (x *WatchPermissionSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPermissionSetsResponse.ProtoReflect.Descriptor instead.
func (*WatchPermissionSetsResponse) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{1}
}

func (m *WatchPermissionSetsResponse) GetResponse() isWatchPermissionSetsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *WatchPermissionSetsResponse) GetChange() *PermissionSetChange {
	if x, ok := x.GetResponse().(*WatchPermissionSetsResponse_Change); ok {
		return x.Change
	}
	return nil
}

func (x *WatchPermissionSetsResponse) GetCompletedRevision() *v1.ZedToken {
	if x, ok := x.GetResponse().(*WatchPermissionSetsResponse_CompletedRevision); ok {
		return x.CompletedRevision
	}
	return nil
}

func (x *WatchPermissionSetsResponse) GetLookupPermissionSetsRequired() *LookupPermissionSetsRequired {
	if x, ok := x.GetResponse().(*WatchPermissionSetsResponse_LookupPermissionSetsRequired); ok {
		return x.LookupPermissionSetsRequired
	}
	return nil
}

func (x *WatchPermissionSetsResponse) GetBreakingSchemaChange() *BreakingSchemaChange {
	if x, ok := x.GetResponse().(*WatchPermissionSetsResponse_BreakingSchemaChange); ok {
		return x.BreakingSchemaChange
	}
	return nil
}

type isWatchPermissionSetsResponse_Response interface {
	isWatchPermissionSetsResponse_Response()
}

type WatchPermissionSetsResponse_Change struct {
	// change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
	// The consumer should apply this change to the current state of the permission sets in their target system.
	// Once an event arrives with completed_revision instead, the consumer shall consider the set of
	// changes originating from that revision completed.
	//
	// The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
	Change *PermissionSetChange `protobuf:"bytes,1,opt,name=change,proto3,oneof"`
}

type WatchPermissionSetsResponse_CompletedRevision struct {
	// completed_revision is the revision token that indicates the completion of a set of changes. It may also be
	// received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
	// not yield any effective changes in the permission sets
	CompletedRevision *v1.ZedToken `protobuf:"bytes,2,opt,name=completed_revision,json=completedRevision,proto3,oneof"`
}

type WatchPermissionSetsResponse_LookupPermissionSetsRequired struct {
	// lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
	// the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
	// cluster has seen its schema changed.
	LookupPermissionSetsRequired *LookupPermissionSetsRequired `protobuf:"bytes,3,opt,name=lookup_permission_sets_required,json=lookupPermissionSetsRequired,proto3,oneof"`
}

type WatchPermissionSetsResponse_BreakingSchemaChange struct {
	// breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
	// and that the consumer should expect delays in the ingestion of new changes,
	// because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
	// will receive a LookupPermissionSetsRequired event.
	BreakingSchemaChange *BreakingSchemaChange `protobuf:"bytes,4,opt,name=breaking_schema_change,json=breakingSchemaChange,proto3,oneof"`
}

func (*WatchPermissionSetsResponse_Change) isWatchPermissionSetsResponse_Response() {}

func (*WatchPermissionSetsResponse_CompletedRevision) isWatchPermissionSetsResponse_Response() {}

func (*WatchPermissionSetsResponse_LookupPermissionSetsRequired) isWatchPermissionSetsResponse_Response() {
}

func (*WatchPermissionSetsResponse_BreakingSchemaChange) isWatchPermissionSetsResponse_Response() {}

type Cursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// limit is the number of permission sets to stream over a single LookupPermissionSets call that was requested.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// token is the snapshot revision at which the cursor was computed.
	Token *v1.ZedToken `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// starting_index is an offset of the permission set represented by this cursor
	StartingIndex uint32 `protobuf:"varint,5,opt,name=starting_index,json=startingIndex,proto3" json:"starting_index,omitempty"`
	// completed_members is a boolean flag that indicates that the cursor has reached the end of the permission sets
	CompletedMembers bool `protobuf:"varint,6,opt,name=completed_members,json=completedMembers,proto3" json:"completed_members,omitempty"`
	// starting_key is a string cursor used by some backends to resume the stream from a specific point.
	StartingKey string `protobuf:"bytes,7,opt,name=starting_key,json=startingKey,proto3" json:"starting_key,omitempty"`
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{2}
}

func (x *Cursor) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Cursor) GetToken() *v1.ZedToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *Cursor) GetStartingIndex() uint32 {
	if x != nil {
		return x.StartingIndex
	}
	return 0
}

func (x *Cursor) GetCompletedMembers() bool {
	if x != nil {
		return x.CompletedMembers
	}
	return false
}

func (x *Cursor) GetStartingKey() string {
	if x != nil {
		return x.StartingKey
	}
	return ""
}

type LookupPermissionSetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// limit is the number of permission sets to stream over a single LookupPermissionSets. Once the limit is reached,
	// the server will close the stream. If more permission sets are available, the consume should open a new stream
	// providing optional_starting_after_cursor, using the cursor from the last response.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// optional_at_revision specifies the client is requesting to lookup PermissionSets at a specific revision. It's
	// optional, and if not provided, PermissionSets will be looked up at the current revision. The cursor always
	// takes precedence in defining the revision when present.
	OptionalAtRevision *v1.ZedToken `protobuf:"bytes,2,opt,name=optional_at_revision,json=optionalAtRevision,proto3" json:"optional_at_revision,omitempty"`
	// optional_starting_after_cursor is used to specify the offset to start streaming permission sets from.
	OptionalStartingAfterCursor *Cursor `protobuf:"bytes,4,opt,name=optional_starting_after_cursor,json=optionalStartingAfterCursor,proto3" json:"optional_starting_after_cursor,omitempty"`
}

func (x *LookupPermissionSetsRequest) Reset() {
	*x = LookupPermissionSetsRequest{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupPermissionSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupPermissionSetsRequest) ProtoMessage() {}

func (x *LookupPermissionSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupPermissionSetsRequest.ProtoReflect.Descriptor instead.
func (*LookupPermissionSetsRequest) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{3}
}

func (x *LookupPermissionSetsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LookupPermissionSetsRequest) GetOptionalAtRevision() *v1.ZedToken {
	if x != nil {
		return x.OptionalAtRevision
	}
	return nil
}

func (x *LookupPermissionSetsRequest) GetOptionalStartingAfterCursor() *Cursor {
	if x != nil {
		return x.OptionalStartingAfterCursor
	}
	return nil
}

type LookupPermissionSetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// change represents the permission set delta necessary to transition an uninitialized target system to
	// a specific snapshot revision. In practice it's not different from the WatchPermissionSetsResponse.change, except
	// all changes will be of time SET_OPERATION_ADDED because it's assumed there is no known previous state.
	//
	// Applying the deltas to a previously initialized target system would yield incorrect results.
	Change *PermissionSetChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	// cursor points to a specific permission set in a revision.
	// The consumer should keep track of the cursor in order to resume streaming in the event of consumer restarts. This
	// is particularly important in backfill scenarios that may take hours or event days to complete.
	Cursor *Cursor `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *LookupPermissionSetsResponse) Reset() {
	*x = LookupPermissionSetsResponse{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupPermissionSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupPermissionSetsResponse) ProtoMessage() {}

func (x *LookupPermissionSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupPermissionSetsResponse.ProtoReflect.Descriptor instead.
func (*LookupPermissionSetsResponse) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{4}
}

func (x *LookupPermissionSetsResponse) GetChange() *PermissionSetChange {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *LookupPermissionSetsResponse) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

type PermissionSetChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revision represents the revision at which the permission set change occurred.
	AtRevision *v1.ZedToken `protobuf:"bytes,1,opt,name=at_revision,json=atRevision,proto3" json:"at_revision,omitempty"`
	// operation represents the type of set operation that took place as part of the change
	Operation PermissionSetChange_SetOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=authzed.api.materialize.v0.PermissionSetChange_SetOperation" json:"operation,omitempty"`
	// parent_set represents the permission set parent of either another set or a member
	ParentSet *SetReference `protobuf:"bytes,3,opt,name=parent_set,json=parentSet,proto3" json:"parent_set,omitempty"`
	// Types that are assignable to Child:
	//
	//	*PermissionSetChange_ChildSet
	//	*PermissionSetChange_ChildMember
	Child isPermissionSetChange_Child `protobuf_oneof:"child"`
}

func (x *PermissionSetChange) Reset() {
	*x = PermissionSetChange{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionSetChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionSetChange) ProtoMessage() {}

func (x *PermissionSetChange) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionSetChange.ProtoReflect.Descriptor instead.
func (*PermissionSetChange) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{5}
}

func (x *PermissionSetChange) GetAtRevision() *v1.ZedToken {
	if x != nil {
		return x.AtRevision
	}
	return nil
}

func (x *PermissionSetChange) GetOperation() PermissionSetChange_SetOperation {
	if x != nil {
		return x.Operation
	}
	return PermissionSetChange_SET_OPERATION_UNSPECIFIED
}

func (x *PermissionSetChange) GetParentSet() *SetReference {
	if x != nil {
		return x.ParentSet
	}
	return nil
}

func (m *PermissionSetChange) GetChild() isPermissionSetChange_Child {
	if m != nil {
		return m.Child
	}
	return nil
}

func (x *PermissionSetChange) GetChildSet() *SetReference {
	if x, ok := x.GetChild().(*PermissionSetChange_ChildSet); ok {
		return x.ChildSet
	}
	return nil
}

func (x *PermissionSetChange) GetChildMember() *MemberReference {
	if x, ok := x.GetChild().(*PermissionSetChange_ChildMember); ok {
		return x.ChildMember
	}
	return nil
}

type isPermissionSetChange_Child interface {
	isPermissionSetChange_Child()
}

type PermissionSetChange_ChildSet struct {
	// child_set represents the scenario where another set is considered member of the parent set
	ChildSet *SetReference `protobuf:"bytes,4,opt,name=child_set,json=childSet,proto3,oneof"`
}

type PermissionSetChange_ChildMember struct {
	// child_member represents the scenario where an specific object is considered member of the parent set
	ChildMember *MemberReference `protobuf:"bytes,5,opt,name=child_member,json=childMember,proto3,oneof"`
}

func (*PermissionSetChange_ChildSet) isPermissionSetChange_Child() {}

func (*PermissionSetChange_ChildMember) isPermissionSetChange_Child() {}

type SetReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object_type is the type of object in a permission set
	ObjectType string `protobuf:"bytes,1,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// object_id is the ID of a permission set
	ObjectId string `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// permission_or_relation is the permission or relation referenced by this permission set
	PermissionOrRelation string `protobuf:"bytes,3,opt,name=permission_or_relation,json=permissionOrRelation,proto3" json:"permission_or_relation,omitempty"`
}

func (x *SetReference) Reset() {
	*x = SetReference{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReference) ProtoMessage() {}

func (x *SetReference) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReference.ProtoReflect.Descriptor instead.
func (*SetReference) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{6}
}

func (x *SetReference) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *SetReference) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *SetReference) GetPermissionOrRelation() string {
	if x != nil {
		return x.PermissionOrRelation
	}
	return ""
}

type MemberReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object_type is the type of object of a permission set member
	ObjectType string `protobuf:"bytes,1,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// object_id is the ID of a permission set member
	ObjectId string `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// optional_permission_or_relation is the permission or relation referenced by this permission set member
	OptionalPermissionOrRelation string `protobuf:"bytes,3,opt,name=optional_permission_or_relation,json=optionalPermissionOrRelation,proto3" json:"optional_permission_or_relation,omitempty"`
}

func (x *MemberReference) Reset() {
	*x = MemberReference{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberReference) ProtoMessage() {}

func (x *MemberReference) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberReference.ProtoReflect.Descriptor instead.
func (*MemberReference) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{7}
}

func (x *MemberReference) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *MemberReference) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *MemberReference) GetOptionalPermissionOrRelation() string {
	if x != nil {
		return x.OptionalPermissionOrRelation
	}
	return ""
}

// LookupPermissionSetsRequired is a signal that the consumer should perform a LookupPermissionSets call because
// the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
// cluster has seen its schema changed, see BreakingSchemaChange event.
type LookupPermissionSetsRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required_lookup_at is the snapshot revision at which the permission set needs to be rebuilt to.
	RequiredLookupAt *v1.ZedToken `protobuf:"bytes,1,opt,name=required_lookup_at,json=requiredLookupAt,proto3" json:"required_lookup_at,omitempty"`
}

func (x *LookupPermissionSetsRequired) Reset() {
	*x = LookupPermissionSetsRequired{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupPermissionSetsRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupPermissionSetsRequired) ProtoMessage() {}

func (x *LookupPermissionSetsRequired) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupPermissionSetsRequired.ProtoReflect.Descriptor instead.
func (*LookupPermissionSetsRequired) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{8}
}

func (x *LookupPermissionSetsRequired) GetRequiredLookupAt() *v1.ZedToken {
	if x != nil {
		return x.RequiredLookupAt
	}
	return nil
}

// BreakingSchemaChange is used to signal a breaking schema change has happened, and that the consumer should
// expect delays in the ingestion of new changes, because the permission set snapshot needs to be rebuilt from scratch.
// Once the snapshot is ready, the consumer will receive a LookupPermissionSetsRequired event.
type BreakingSchemaChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// change_at is the revision at which a breaking schema event has happened.
	ChangeAt *v1.ZedToken `protobuf:"bytes,1,opt,name=change_at,json=changeAt,proto3" json:"change_at,omitempty"`
}

func (x *BreakingSchemaChange) Reset() {
	*x = BreakingSchemaChange{}
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BreakingSchemaChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakingSchemaChange) ProtoMessage() {}

func (x *BreakingSchemaChange) ProtoReflect() protoreflect.Message {
	mi := &file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakingSchemaChange.ProtoReflect.Descriptor instead.
func (*BreakingSchemaChange) Descriptor() ([]byte, []int) {
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP(), []int{9}
}

func (x *BreakingSchemaChange) GetChangeAt() *v1.ZedToken {
	if x != nil {
		return x.ChangeAt
	}
	return nil
}

var File_authzed_api_materialize_v0_watchpermissionsets_proto protoreflect.FileDescriptor

var file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDesc = []byte{
	0x0a, 0x34, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2f, 0x76, 0x30, 0x2f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e,
	0x76, 0x30, 0x1a, 0x19, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a,
	0x1a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x17, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x65,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x15, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0xad, 0x03,
	0x0a, 0x1b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x1f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x16, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01,
	0x0a, 0x06, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x5a,
	0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0xe8, 0x01, 0x0a, 0x1b, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x65, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x1e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x52, 0x1b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x22, 0xa3, 0x01, 0x0a, 0x1c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xfc, 0x03, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39,
	0x0a, 0x0b, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0a, 0x61,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x54,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x1c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x5a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x74, 0x22, 0x4d, 0x0a, 0x14, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x74, 0x32, 0xb9, 0x02, 0x0a, 0x1a, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x36, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x12,
	0x37, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x62, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x30, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescOnce sync.Once
	file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescData = file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDesc
)

func file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescGZIP() []byte {
	file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescOnce.Do(func() {
		file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescData = protoimpl.X.CompressGZIP(file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescData)
	})
	return file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDescData
}

var file_authzed_api_materialize_v0_watchpermissionsets_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_authzed_api_materialize_v0_watchpermissionsets_proto_goTypes = []any{
	(PermissionSetChange_SetOperation)(0), // 0: authzed.api.materialize.v0.PermissionSetChange.SetOperation
	(*WatchPermissionSetsRequest)(nil),    // 1: authzed.api.materialize.v0.WatchPermissionSetsRequest
	(*WatchPermissionSetsResponse)(nil),   // 2: authzed.api.materialize.v0.WatchPermissionSetsResponse
	(*Cursor)(nil),                        // 3: authzed.api.materialize.v0.Cursor
	(*LookupPermissionSetsRequest)(nil),   // 4: authzed.api.materialize.v0.LookupPermissionSetsRequest
	(*LookupPermissionSetsResponse)(nil),  // 5: authzed.api.materialize.v0.LookupPermissionSetsResponse
	(*PermissionSetChange)(nil),           // 6: authzed.api.materialize.v0.PermissionSetChange
	(*SetReference)(nil),                  // 7: authzed.api.materialize.v0.SetReference
	(*MemberReference)(nil),               // 8: authzed.api.materialize.v0.MemberReference
	(*LookupPermissionSetsRequired)(nil),  // 9: authzed.api.materialize.v0.LookupPermissionSetsRequired
	(*BreakingSchemaChange)(nil),          // 10: authzed.api.materialize.v0.BreakingSchemaChange
	(*v1.ZedToken)(nil),                   // 11: authzed.api.v1.ZedToken
}
var file_authzed_api_materialize_v0_watchpermissionsets_proto_depIdxs = []int32{
	11, // 0: authzed.api.materialize.v0.WatchPermissionSetsRequest.optional_starting_after:type_name -> authzed.api.v1.ZedToken
	6,  // 1: authzed.api.materialize.v0.WatchPermissionSetsResponse.change:type_name -> authzed.api.materialize.v0.PermissionSetChange
	11, // 2: authzed.api.materialize.v0.WatchPermissionSetsResponse.completed_revision:type_name -> authzed.api.v1.ZedToken
	9,  // 3: authzed.api.materialize.v0.WatchPermissionSetsResponse.lookup_permission_sets_required:type_name -> authzed.api.materialize.v0.LookupPermissionSetsRequired
	10, // 4: authzed.api.materialize.v0.WatchPermissionSetsResponse.breaking_schema_change:type_name -> authzed.api.materialize.v0.BreakingSchemaChange
	11, // 5: authzed.api.materialize.v0.Cursor.token:type_name -> authzed.api.v1.ZedToken
	11, // 6: authzed.api.materialize.v0.LookupPermissionSetsRequest.optional_at_revision:type_name -> authzed.api.v1.ZedToken
	3,  // 7: authzed.api.materialize.v0.LookupPermissionSetsRequest.optional_starting_after_cursor:type_name -> authzed.api.materialize.v0.Cursor
	6,  // 8: authzed.api.materialize.v0.LookupPermissionSetsResponse.change:type_name -> authzed.api.materialize.v0.PermissionSetChange
	3,  // 9: authzed.api.materialize.v0.LookupPermissionSetsResponse.cursor:type_name -> authzed.api.materialize.v0.Cursor
	11, // 10: authzed.api.materialize.v0.PermissionSetChange.at_revision:type_name -> authzed.api.v1.ZedToken
	0,  // 11: authzed.api.materialize.v0.PermissionSetChange.operation:type_name -> authzed.api.materialize.v0.PermissionSetChange.SetOperation
	7,  // 12: authzed.api.materialize.v0.PermissionSetChange.parent_set:type_name -> authzed.api.materialize.v0.SetReference
	7,  // 13: authzed.api.materialize.v0.PermissionSetChange.child_set:type_name -> authzed.api.materialize.v0.SetReference
	8,  // 14: authzed.api.materialize.v0.PermissionSetChange.child_member:type_name -> authzed.api.materialize.v0.MemberReference
	11, // 15: authzed.api.materialize.v0.LookupPermissionSetsRequired.required_lookup_at:type_name -> authzed.api.v1.ZedToken
	11, // 16: authzed.api.materialize.v0.BreakingSchemaChange.change_at:type_name -> authzed.api.v1.ZedToken
	1,  // 17: authzed.api.materialize.v0.WatchPermissionSetsService.WatchPermissionSets:input_type -> authzed.api.materialize.v0.WatchPermissionSetsRequest
	4,  // 18: authzed.api.materialize.v0.WatchPermissionSetsService.LookupPermissionSets:input_type -> authzed.api.materialize.v0.LookupPermissionSetsRequest
	2,  // 19: authzed.api.materialize.v0.WatchPermissionSetsService.WatchPermissionSets:output_type -> authzed.api.materialize.v0.WatchPermissionSetsResponse
	5,  // 20: authzed.api.materialize.v0.WatchPermissionSetsService.LookupPermissionSets:output_type -> authzed.api.materialize.v0.LookupPermissionSetsResponse
	19, // [19:21] is the sub-list for method output_type
	17, // [17:19] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_authzed_api_materialize_v0_watchpermissionsets_proto_init() }
func file_authzed_api_materialize_v0_watchpermissionsets_proto_init() {
	if File_authzed_api_materialize_v0_watchpermissionsets_proto != nil {
		return
	}
	file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[1].OneofWrappers = []any{
		(*WatchPermissionSetsResponse_Change)(nil),
		(*WatchPermissionSetsResponse_CompletedRevision)(nil),
		(*WatchPermissionSetsResponse_LookupPermissionSetsRequired)(nil),
		(*WatchPermissionSetsResponse_BreakingSchemaChange)(nil),
	}
	file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes[5].OneofWrappers = []any{
		(*PermissionSetChange_ChildSet)(nil),
		(*PermissionSetChange_ChildMember)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authzed_api_materialize_v0_watchpermissionsets_proto_goTypes,
		DependencyIndexes: file_authzed_api_materialize_v0_watchpermissionsets_proto_depIdxs,
		EnumInfos:         file_authzed_api_materialize_v0_watchpermissionsets_proto_enumTypes,
		MessageInfos:      file_authzed_api_materialize_v0_watchpermissionsets_proto_msgTypes,
	}.Build()
	File_authzed_api_materialize_v0_watchpermissionsets_proto = out.File
	file_authzed_api_materialize_v0_watchpermissionsets_proto_rawDesc = nil
	file_authzed_api_materialize_v0_watchpermissionsets_proto_goTypes = nil
	file_authzed_api_materialize_v0_watchpermissionsets_proto_depIdxs = nil
}
